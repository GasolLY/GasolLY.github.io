<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Gasol</title>
  
  
  <link href="http://gasolly.github.io/atom.xml" rel="self"/>
  
  <link href="http://gasolly.github.io/"/>
  <updated>2022-02-10T12:24:14.373Z</updated>
  <id>http://gasolly.github.io/</id>
  
  <author>
    <name>Xufei Pan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LevelDB源码分析——10.Compaction操作</title>
    <link href="http://gasolly.github.io/2022/02/10/LevelDB%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E2%80%94%E2%80%9410.Compaction%E6%93%8D%E4%BD%9C/"/>
    <id>http://gasolly.github.io/2022/02/10/LevelDB%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E2%80%94%E2%80%9410.Compaction%E6%93%8D%E4%BD%9C/</id>
    <published>2022-02-10T10:30:30.000Z</published>
    <updated>2022-02-10T12:24:14.373Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;十-Compaction操作&quot;&gt;&lt;a href=&quot;#十-Compaction操作&quot; class=&quot;headerlink&quot; title=&quot;十.Compaction操作&quot;&gt;&lt;/a&gt;十.Compaction操作&lt;/h2&gt;&lt;p&gt;LevelDB 源码分析系列也步入尾声，本篇将分析 LevelDB 中至关重要的 Compaction 过程，依然从代码的角度出发。建议大家了解 Compaction 的作用和过程。&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="http://gasolly.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="LevelDB" scheme="http://gasolly.github.io/categories/%E5%AD%A6%E4%B9%A0/LevelDB/"/>
    
    
    <category term="LevelDB" scheme="http://gasolly.github.io/tags/LevelDB/"/>
    
  </entry>
  
  <entry>
    <title>LevelDB源码分析——9.读写完整流程</title>
    <link href="http://gasolly.github.io/2022/02/10/LevelDB%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E2%80%94%E2%80%949.%E8%AF%BB%E5%86%99%E5%AE%8C%E6%95%B4%E6%B5%81%E7%A8%8B/"/>
    <id>http://gasolly.github.io/2022/02/10/LevelDB%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E2%80%94%E2%80%949.%E8%AF%BB%E5%86%99%E5%AE%8C%E6%95%B4%E6%B5%81%E7%A8%8B/</id>
    <published>2022-02-10T08:30:30.000Z</published>
    <updated>2022-02-10T12:24:06.928Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;九-读写完整流程&quot;&gt;&lt;a href=&quot;#九-读写完整流程&quot; class=&quot;headerlink&quot; title=&quot;九.读写完整流程&quot;&gt;&lt;/a&gt;九.读写完整流程&lt;/h2&gt;&lt;p&gt;本系列之前的数篇博文从面向对象的角度分析了 LevelDB 中的核心组件，理解了每个类的作用。本篇将从面向过程的角度，分析 LevelDB 创建、打开和读写的完整流程。&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="http://gasolly.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="LevelDB" scheme="http://gasolly.github.io/categories/%E5%AD%A6%E4%B9%A0/LevelDB/"/>
    
    
    <category term="LevelDB" scheme="http://gasolly.github.io/tags/LevelDB/"/>
    
  </entry>
  
  <entry>
    <title>LevelDB源码分析——8.版本管理</title>
    <link href="http://gasolly.github.io/2022/02/10/LevelDB%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E2%80%94%E2%80%948.%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/"/>
    <id>http://gasolly.github.io/2022/02/10/LevelDB%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E2%80%94%E2%80%948.%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/</id>
    <published>2022-02-10T07:30:30.000Z</published>
    <updated>2022-02-10T12:24:03.238Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;八-版本管理&quot;&gt;&lt;a href=&quot;#八-版本管理&quot; class=&quot;headerlink&quot; title=&quot;八.版本管理&quot;&gt;&lt;/a&gt;八.版本管理&lt;/h2&gt;&lt;p&gt;本系列的上一篇介绍了 Sorted Table 的构建和读取过程。当 Sorted Table 不断构建出来时，需要使用适当的方式来组织、管理生成的 &lt;code&gt;.ldb&lt;/code&gt; 文件。并且 LevelDB 支持快照，这需要 LevelDB 具有版本管理能力。本篇将分析 LevelDB 版本管理相关的代码。&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="http://gasolly.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="LevelDB" scheme="http://gasolly.github.io/categories/%E5%AD%A6%E4%B9%A0/LevelDB/"/>
    
    
    <category term="LevelDB" scheme="http://gasolly.github.io/tags/LevelDB/"/>
    
  </entry>
  
  <entry>
    <title>LevelDB源码分析——7.Sorted String Table续</title>
    <link href="http://gasolly.github.io/2022/02/10/LevelDB%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E2%80%94%E2%80%947.Sorted%20String%20Table%E7%BB%AD/"/>
    <id>http://gasolly.github.io/2022/02/10/LevelDB%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E2%80%94%E2%80%947.Sorted%20String%20Table%E7%BB%AD/</id>
    <published>2022-02-10T06:30:30.000Z</published>
    <updated>2022-02-10T12:23:57.414Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;七-Sorted-String-Table续&quot;&gt;&lt;a href=&quot;#七-Sorted-String-Table续&quot; class=&quot;headerlink&quot; title=&quot;七.Sorted String Table续&quot;&gt;&lt;/a&gt;七.Sorted String Table续&lt;/h2&gt;&lt;p&gt;本系列的上一篇介绍了 Sorted Table 的构建过程，本篇就继续分析 Sorted Table 的读取、解析过程。&lt;/p&gt;
&lt;h3 id=&quot;4-Block&quot;&gt;&lt;a href=&quot;#4-Block&quot; class=&quot;headerlink&quot; title=&quot;4. Block&quot;&gt;&lt;/a&gt;4. Block&lt;/h3&gt;&lt;p&gt;根据依赖关系，首先来看 &lt;a href=&quot;https://github.com/google/leveldb/blob/master/table/format.cc&quot;&gt;&lt;code&gt;table/format.cc&lt;/code&gt;&lt;/a&gt; 中 &lt;code&gt;ReadBlock&lt;/code&gt; 函数的实现：&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="http://gasolly.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="LevelDB" scheme="http://gasolly.github.io/categories/%E5%AD%A6%E4%B9%A0/LevelDB/"/>
    
    
    <category term="LevelDB" scheme="http://gasolly.github.io/tags/LevelDB/"/>
    
  </entry>
  
  <entry>
    <title>LevelDB源码分析——6.Sorted String Table</title>
    <link href="http://gasolly.github.io/2022/02/10/LevelDB%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E2%80%94%E2%80%946.Sorted%20String%20Table/"/>
    <id>http://gasolly.github.io/2022/02/10/LevelDB%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E2%80%94%E2%80%946.Sorted%20String%20Table/</id>
    <published>2022-02-10T05:30:30.000Z</published>
    <updated>2022-02-10T12:08:26.944Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;六-Sorted-String-Table&quot;&gt;&lt;a href=&quot;#六-Sorted-String-Table&quot; class=&quot;headerlink&quot; title=&quot;六.Sorted String Table&quot;&gt;&lt;/a&gt;六.Sorted String Table&lt;/h2&gt;&lt;p&gt;本系列的上一篇介绍了内存数据库，并且提到了内存数据库的大小限制问题。当内存数据块占用的内存达到阈值时（LevelDB 默认 4MB），会将当前的内存数据库 &lt;code&gt;mem_&lt;/code&gt; 转为不可修改的 &lt;code&gt;imm_&lt;/code&gt;，并且为 &lt;code&gt;mem_&lt;/code&gt; 赋值一个新的内存数据库。这使得内存数据库的大小始终保持在阈值以下，同时保持着超高的读写性能。而不可修改的 &lt;code&gt;imm_&lt;/code&gt; 会经历Compaction 过程，转为 Sorted Table 存储到磁盘中。本篇将详细阐述该过程。&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="http://gasolly.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="LevelDB" scheme="http://gasolly.github.io/categories/%E5%AD%A6%E4%B9%A0/LevelDB/"/>
    
    
    <category term="LevelDB" scheme="http://gasolly.github.io/tags/LevelDB/"/>
    
  </entry>
  
  <entry>
    <title>LevelDB源码分析——5.不同的主键Key类型</title>
    <link href="http://gasolly.github.io/2022/02/10/LevelDB%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E2%80%94%E2%80%945.%E4%B8%8D%E5%90%8C%E7%9A%84%E4%B8%BB%E9%94%AEKey%E7%B1%BB%E5%9E%8B/"/>
    <id>http://gasolly.github.io/2022/02/10/LevelDB%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E2%80%94%E2%80%945.%E4%B8%8D%E5%90%8C%E7%9A%84%E4%B8%BB%E9%94%AEKey%E7%B1%BB%E5%9E%8B/</id>
    <published>2022-02-10T02:30:30.000Z</published>
    <updated>2022-02-10T12:23:46.016Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;五-不同的主键Key类型&quot;&gt;&lt;a href=&quot;#五-不同的主键Key类型&quot; class=&quot;headerlink&quot; title=&quot;五.不同的主键Key类型&quot;&gt;&lt;/a&gt;五.不同的主键Key类型&lt;/h2&gt;&lt;p&gt;本系列的前两篇介绍了LevelDB高性能写操作的核心：日志与内存数据库。&lt;/p&gt;
&lt;p&gt;在阅读LevelDB的源码时，往往能看到这样的参数传递：&lt;code&gt;Slice key&lt;/code&gt; ,&lt;code&gt;const char* key&lt;/code&gt;,&lt;code&gt;Key key&lt;/code&gt;等等&lt;/p&gt;
&lt;p&gt;他们都有相同的参数名，但有时代表的key却不一定相同。&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="http://gasolly.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="LevelDB" scheme="http://gasolly.github.io/categories/%E5%AD%A6%E4%B9%A0/LevelDB/"/>
    
    
    <category term="LevelDB" scheme="http://gasolly.github.io/tags/LevelDB/"/>
    
  </entry>
  
  <entry>
    <title>LevelDB源码分析——4.内存数据库</title>
    <link href="http://gasolly.github.io/2022/02/09/LevelDB%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E2%80%94%E2%80%944.%E5%86%85%E5%AD%98%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>http://gasolly.github.io/2022/02/09/LevelDB%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E2%80%94%E2%80%944.%E5%86%85%E5%AD%98%E6%95%B0%E6%8D%AE%E5%BA%93/</id>
    <published>2022-02-09T13:30:30.000Z</published>
    <updated>2022-02-10T12:02:25.010Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;四-内存数据库&quot;&gt;&lt;a href=&quot;#四-内存数据库&quot; class=&quot;headerlink&quot; title=&quot;四.内存数据库&quot;&gt;&lt;/a&gt;四.内存数据库&lt;/h2&gt;&lt;p&gt;本系列的上一篇介绍了 LevelDB 写操作中构造的 &lt;code&gt;WriteBatch&lt;/code&gt;，以及写操作的第一步：追加日志。本篇将继续介绍写操作的第二步：插入内存数据库。&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="http://gasolly.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="LevelDB" scheme="http://gasolly.github.io/categories/%E5%AD%A6%E4%B9%A0/LevelDB/"/>
    
    
    <category term="LevelDB" scheme="http://gasolly.github.io/tags/LevelDB/"/>
    
  </entry>
  
  <entry>
    <title>LevelDB源码分析——3.日志</title>
    <link href="http://gasolly.github.io/2022/02/09/LevelDB%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E2%80%94%E2%80%943.%E6%97%A5%E5%BF%97/"/>
    <id>http://gasolly.github.io/2022/02/09/LevelDB%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E2%80%94%E2%80%943.%E6%97%A5%E5%BF%97/</id>
    <published>2022-02-09T10:40:25.000Z</published>
    <updated>2022-02-10T11:32:09.532Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;三-日志&quot;&gt;&lt;a href=&quot;#三-日志&quot; class=&quot;headerlink&quot; title=&quot;三.日志&quot;&gt;&lt;/a&gt;三.日志&lt;/h2&gt;&lt;p&gt;本系列的&lt;a href=&quot;https://gasolly.github.io/2022/02/07/LevelDB%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E2%80%94%E2%80%942.%E5%9F%BA%E6%9C%AC%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%BB%AD/&quot;&gt;前两篇&lt;/a&gt;介绍了 LevelDB 中使用的数据结构，并没有牵涉到 LevelDB 的核心实现。接下来的几篇将着重介绍 LevelDB 核心组件，包括日志、内存数据库、SortedTable、Compaction 和版本管理。本篇着重阐述高性能写操作的核心：日志和内存数据库。&lt;/p&gt;
&lt;p&gt;怎样最快地把键值对存起来？不考虑查找的速度的话，追加地写入文件是最快的，查找时反向查找。举个例子🌰：&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="http://gasolly.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="LevelDB" scheme="http://gasolly.github.io/categories/%E5%AD%A6%E4%B9%A0/LevelDB/"/>
    
    
    <category term="LevelDB" scheme="http://gasolly.github.io/tags/LevelDB/"/>
    
  </entry>
  
  <entry>
    <title>LevelDB源码分析——2.基本的数据结构续</title>
    <link href="http://gasolly.github.io/2022/02/07/LevelDB%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E2%80%94%E2%80%942.%E5%9F%BA%E6%9C%AC%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%BB%AD%20(copy)/"/>
    <id>http://gasolly.github.io/2022/02/07/LevelDB%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E2%80%94%E2%80%942.%E5%9F%BA%E6%9C%AC%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%BB%AD%20(copy)/</id>
    <published>2022-02-07T04:40:15.000Z</published>
    <updated>2022-02-07T04:49:34.969Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;二-基本的数据结构续&quot;&gt;&lt;a href=&quot;#二-基本的数据结构续&quot; class=&quot;headerlink&quot; title=&quot;二.基本的数据结构续&quot;&gt;&lt;/a&gt;二.基本的数据结构续&lt;/h2&gt;&lt;p&gt;本系列的&lt;a href=&quot;https://gasolly.github.io/2022/02/07/LevelDB%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E2%80%94%E2%80%941.%E5%9F%BA%E6%9C%AC%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/&quot;&gt;上一篇&lt;/a&gt;介绍了 &lt;code&gt;LevelDB&lt;/code&gt; 中的 &lt;code&gt;Slice&lt;/code&gt;、&lt;code&gt;Hash&lt;/code&gt; 和 &lt;code&gt;LRUCache&lt;/code&gt; 的实现，这一篇将继续分析布隆过滤器、内存池和跳表。&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="http://gasolly.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="LevelDB" scheme="http://gasolly.github.io/categories/%E5%AD%A6%E4%B9%A0/LevelDB/"/>
    
    
    <category term="LevelDB" scheme="http://gasolly.github.io/tags/LevelDB/"/>
    
  </entry>
  
  <entry>
    <title>LevelDB源码分析——1.基本的数据结构</title>
    <link href="http://gasolly.github.io/2022/02/07/LevelDB%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E2%80%94%E2%80%941.%E5%9F%BA%E6%9C%AC%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>http://gasolly.github.io/2022/02/07/LevelDB%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E2%80%94%E2%80%941.%E5%9F%BA%E6%9C%AC%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</id>
    <published>2022-02-07T04:08:41.000Z</published>
    <updated>2022-02-07T04:36:25.591Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;一．基本的数据结构&quot;&gt;&lt;a href=&quot;#一．基本的数据结构&quot; class=&quot;headerlink&quot; title=&quot;一．基本的数据结构&quot;&gt;&lt;/a&gt;一．基本的数据结构&lt;/h2&gt;&lt;p&gt;为了督促自己认真的阅读LevelDB源码，同时记录下相关的收获，避免阅后即忘，因此在Blog中记录下LevelDB源码分析的相关内容。&lt;/p&gt;
&lt;p&gt;本文会介绍 LevelDB 中的基本数据结构，包括 &lt;code&gt;Slice&lt;/code&gt;、&lt;code&gt;Hash&lt;/code&gt;、&lt;code&gt;LRUCache&lt;/code&gt;。&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="http://gasolly.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="LevelDB" scheme="http://gasolly.github.io/categories/%E5%AD%A6%E4%B9%A0/LevelDB/"/>
    
    
    <category term="LevelDB" scheme="http://gasolly.github.io/tags/LevelDB/"/>
    
  </entry>
  
  <entry>
    <title>LevelDB源码分析——0.前置知识</title>
    <link href="http://gasolly.github.io/2022/02/05/LevelDB%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E2%80%94%E2%80%940.%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86/"/>
    <id>http://gasolly.github.io/2022/02/05/LevelDB%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E2%80%94%E2%80%940.%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86/</id>
    <published>2022-02-05T04:00:41.000Z</published>
    <updated>2022-02-10T11:31:52.555Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;零．前置知识&quot;&gt;&lt;a href=&quot;#零．前置知识&quot; class=&quot;headerlink&quot; title=&quot;零．前置知识&quot;&gt;&lt;/a&gt;零．前置知识&lt;/h2&gt;&lt;p&gt;本节为LevelDB源码分析的第0章，主要介绍LevelDB相关的前置知识。包括：&lt;code&gt;LSM Tree&lt;/code&gt;、&lt;code&gt;Bloom Filter&lt;/code&gt;。&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="http://gasolly.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="LevelDB" scheme="http://gasolly.github.io/categories/%E5%AD%A6%E4%B9%A0/LevelDB/"/>
    
    
    <category term="LevelDB" scheme="http://gasolly.github.io/tags/LevelDB/"/>
    
  </entry>
  
  <entry>
    <title>Virtual OCSSD 环境搭建</title>
    <link href="http://gasolly.github.io/2021/06/17/Virtual-OCSSD-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http://gasolly.github.io/2021/06/17/Virtual-OCSSD-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</id>
    <published>2021-06-17T15:54:01.000Z</published>
    <updated>2021-06-17T15:27:33.464Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;一、Virtual-OpenChannel-SSD-环境配置&quot;&gt;&lt;a href=&quot;#一、Virtual-OpenChannel-SSD-环境配置&quot; class=&quot;headerlink&quot; title=&quot;一、Virtual OpenChannel SSD 环境配置&quot;&gt;&lt;/a&gt;一、Virtual OpenChannel SSD 环境配置&lt;/h2&gt;&lt;p&gt;1.下载Qemu-nvme的源码&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git &lt;span class=&quot;built_in&quot;&gt;clone&lt;/span&gt; https://github.com/OpenChannelSSD/qemu-nvme&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;2.进入qemu-nvme目录下，运行配置脚本，make编译&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; qemu-nvme&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;./configure --target-list=x86_64-softmmu --prefix=&lt;span class=&quot;variable&quot;&gt;$HOME&lt;/span&gt;/qemu-nvme&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;make&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;make install&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="学习" scheme="http://gasolly.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="QEMU" scheme="http://gasolly.github.io/categories/%E5%AD%A6%E4%B9%A0/QEMU/"/>
    
    
    <category term="OCSSD" scheme="http://gasolly.github.io/tags/OCSSD/"/>
    
    <category term="QEMU" scheme="http://gasolly.github.io/tags/QEMU/"/>
    
  </entry>
  
  <entry>
    <title>About Me</title>
    <link href="http://gasolly.github.io/2021/06/17/About-Me/"/>
    <id>http://gasolly.github.io/2021/06/17/About-Me/</id>
    <published>2021-06-17T08:39:22.000Z</published>
    <updated>2021-06-17T09:04:02.758Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Done is better than perfect.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;姓名：潘许飞 - Gasol&lt;/p&gt;
&lt;p&gt;学习/工作：HUST - WNLO&lt;/p&gt;
&lt;p&gt;邮箱：&lt;a</summary>
        
      
    
    
    
    
    <category term="随笔" scheme="http://gasolly.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>SPDK调研</title>
    <link href="http://gasolly.github.io/2021/06/17/SPDK%E8%B0%83%E7%A0%94/"/>
    <id>http://gasolly.github.io/2021/06/17/SPDK%E8%B0%83%E7%A0%94/</id>
    <published>2021-06-17T05:44:41.000Z</published>
    <updated>2021-06-17T15:19:56.849Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;一．SPDK简介&quot;&gt;&lt;a href=&quot;#一．SPDK简介&quot; class=&quot;headerlink&quot; title=&quot;一．SPDK简介&quot;&gt;&lt;/a&gt;一．SPDK简介&lt;/h2&gt;&lt;h3 id=&quot;1-SPDK的起源&quot;&gt;&lt;a href=&quot;#1-SPDK的起源&quot; class=&quot;headerlink&quot; title=&quot;1.SPDK的起源&quot;&gt;&lt;/a&gt;1.SPDK的起源&lt;/h3&gt;&lt;p&gt;固态存储设备正在取代数据中心。目前这一代的闪存存储，比起传统的磁盘设备，在性能（performance）、功耗（power consumption）和机架密度（rack density）上具有显著的优势。这些优势将会继续增大，使闪存存储作为下一代存储设备进入市场。&lt;/p&gt;
&lt;p&gt;用户使用现在的固态设备，比如Intel® SSD DC P3700 Series Non-Volatile Memory Express（NVMe）驱动，面临一个主要的挑战：因为吞吐量和延迟性能比传统的磁盘好太多，现在总的处理时间中，存储软件占用了更大的比例。换句话说，存储软件栈的性能和效率在整个存储系统中越来越重要。随着存储设备继续发展，它将面临远远超过正在使用的软件体系结构的风险（即存储设备受制于相关软件的不足而不能发挥全部性能），在接下来的几年中，存储设备将会继续发展到一个令人难以置信的地步。&lt;/p&gt;
&lt;p&gt;为了帮助存储OEM（设备代工厂）和ISV（独立软件开发商）整合硬件，Intel构造了一系列驱动，以及一个完善的、端对端的参考存储体系结构，被命名为Storage Performance Development Kit（SPDK）。SPDK的目标是通过同时使用Intel的网络技术，处理技术和存储技术来提高突出显著的效率和性能。通过运行为硬件设计的软件，SPDK已经证明很容易达到每秒钟数百万次I/O读取，通过使用许多处理器核心和许多NVMe驱动去存储，而不需要额外卸载硬件。Intel在BSD license许可协议下通过Github分发提供其全部的Linux参考架构的源代码。博客、邮件列表和额外文档可以在spdk.io中找到。&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="http://gasolly.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="SPDK" scheme="http://gasolly.github.io/categories/%E5%AD%A6%E4%B9%A0/SPDK/"/>
    
    
    <category term="SPDK" scheme="http://gasolly.github.io/tags/SPDK/"/>
    
    <category term="OCSSD" scheme="http://gasolly.github.io/tags/OCSSD/"/>
    
    <category term="用户态IO" scheme="http://gasolly.github.io/tags/%E7%94%A8%E6%88%B7%E6%80%81IO/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://gasolly.github.io/2021/06/12/hello-world/"/>
    <id>http://gasolly.github.io/2021/06/12/hello-world/</id>
    <published>2021-06-12T07:56:43.225Z</published>
    <updated>2021-06-17T08:29:17.397Z</updated>
    
    
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
</feed>
